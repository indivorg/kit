{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:jest/recommended",
    "prettier",
    "plugin:promise/recommended",
    "plugin:eslint-comments/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended"
  ],
  "plugins": ["react", "import", "unicorn", "eslint-comments"],
  "ignorePatterns": ["**/*.d.ts", "**/*.min.js", "**/generated", "**/dist"],
  "settings": {
    "react": {
      "pragma": "React",
      "version": "detect",
      "linkComponents": ["Link"]
    }
  },
  "rules": {
    "eqeqeq": ["error", "smart"],
    "no-console": "error",
    "prefer-arrow-callback": "error",
    "prefer-const": ["error", { "destructuring": "all" }],
    "prefer-template": "error",
    "quotes": [
      "error",
      "single",
      { "avoidEscape": true, "allowTemplateLiterals": false }
    ],
    "spaced-comment": [
      "error",
      "always",
      { "exceptions": ["-", "=", "#__PURE__"], "markers": ["/"] }
    ],
    // location should be accessed through `window.location`
    "no-restricted-globals": [
      "error",
      "event",
      "isNaN",
      "location",
      "name",
      "parseInt"
    ],
    "sort-imports": ["error", { "ignoreDeclarationSort": true }],
    "no-return-await": "error",
    "import/no-default-export": "error",
    "import/no-extraneous-dependencies": "error",
    "import/no-unassigned-import": "error",
    "import/order": [
      "error",
      { "alphabetize": { "order": "asc" }, "newlines-between": "never" }
    ],
    "import/no-duplicates": "error",
    "eslint-comments/no-unused-disable": "error",
    // might wanna enable this but require description? https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/ban-ts-comment.md#allow-with-description
    "@typescript-eslint/ban-ts-comment": "off",
    "@typescript-eslint/explicit-module-boundary-types": "warn",
    "@typescript-eslint/member-ordering": "error",
    "@typescript-eslint/no-unused-vars": [
      "error",
      { "argsIgnorePattern": "^_", "caughtErrors": "all" }
    ],
    "@typescript-eslint/no-unused-expressions": "error",
    "@typescript-eslint/prefer-ts-expect-error": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-explicit-any": "warn",
    "jest/expect-expect": "off",
    "promise/always-return": "off",
    "unicorn/expiring-todo-comments": "warn",
    // the error log sink needs this to be called `error` in logs, so let's just enforce that
    "unicorn/catch-error-name": "error",
    "unicorn/filename-case": ["error", { "case": "kebabCase" }],
    "react/destructuring-assignment": "error",
    "react/jsx-sort-props": "off",
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function",
        "unnamedComponents": "arrow-function"
      }
    ],
    "react/display-name": "off",
    "react/prop-types": "off"
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "rules": {
        // we don't wanna add this to js files
        "@typescript-eslint/no-implicit-any-catch": [
          "error",
          // remove together with `no-explicit-any` at some point
          { "allowExplicitAny": true }
        ],
        // TS handles this
        "no-undef": "off"
      }
    },
    {
      "files": ["**/*.stories.ts", "**/*.stories.tsx"],
      "rules": {
        "import/no-default-export": "off"
      }
    },
    {
      "files": ["**/generated"],
      "rules": {
        // we don't wanna change these since it's generated code
        "@typescript-eslint/array-type": "off",
        "@typescript-eslint/ban-types": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "import/no-duplicates": "off",
        "import/order": "off",
        "sort-imports": "off"
      }
    }
  ]
}
